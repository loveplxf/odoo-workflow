# -*- coding: utf-8 -*-
from odoo import _, api, Command, fields, models
import logging
from odoo.tools.safe_eval import safe_eval
from odoo.exceptions import ValidationError, UserError
from datetime import datetime, date, time, timedelta

_logger = logging.getLogger(__name__)

CONDITION_CODE_TEMP = """# Available locals:
#  - time, date, datetime, timedelta: Python libraries.
#  - env: Odoo Environement.
#  - model: Model of the record on which the action is triggered.
#  - obj: Record on which the action is triggered if there is one, otherwise None.
#  - user, Current user object.
#  eg: users = obj.x_approve_user_ids.ids

users = []
users.append(user.id)"""

FORWARD_CODE_TEMP = """# Automatically generated by the system:
action={
    "name": '转发',
    "type": 'ir.actions.act_window',
    "res_model": 'odoo.workflow.optional',
    "view_mode": 'form',
    "view_id": env.ref('odoo_dynamic_workflow.odoo_workflow_optional_view_form').id,
    "target": 'new',
    "context": {
        **env.context,
        'is_forward': True,
        'active_id': obj.id,
        'active_model': obj._name,
        'default_is_approve': True,
        'default_is_notice': False,
    },
}"""


class OdooWorkflowNode(models.Model):
    _name = 'odoo.workflow.node'
    _description = 'Node'
    _order = 'sequence'

    def _get_default_workflow_id(self):
        if self.env.context.get('active_model') == 'odoo.workflow':
            return self.env.context.get('active_id')

    name = fields.Char(string='Name', translate=True, help="Enter string name of the node.")
    sequence = fields.Integer(string='Sequence', help="Arrange node by defining sequence.")
    flow_start = fields.Boolean(string='Flow Start', help="Check it if this node is the starting node.")
    flow_end = fields.Boolean(string='Flow End', help="Check it if this node is the ending node.")

    active = fields.Boolean('Active', default=True)

    is_fold = fields.Boolean(string='Folded in Statusbar')
    is_forward = fields.Boolean(string='Allow Forward')

    out_link_ids = fields.One2many('odoo.workflow.link', 'node_from', string='Outgoing Transitions')
    in_link_ids = fields.One2many('odoo.workflow.link', 'node_to', string='Incoming Transitions')
    field_ids = fields.One2many('odoo.workflow.node.field', 'node_id', string='Fields')
    button_ids = fields.One2many('odoo.workflow.node.button', 'node_id', string='Buttons')
    workflow_id = fields.Many2one('odoo.workflow', string='Workflow Ref', ondelete='cascade', required=True,
                                  default=_get_default_workflow_id)
    model_id = fields.Many2one('ir.model', string='Model Ref', domain="[('state','=','base')]",
                               related='workflow_id.model_id', required=True)
    bg_color = fields.Char(string='Background Color', compute="_compute_bg_color")
    fg_color = fields.Char(string='Front Color')
    d_position = fields.Char(string='Store Position')

    approve_type = fields.Selection([
        ('all', 'All'),
        ('initiator', 'Initiator'),
        ('optional', 'Optional'),
        ('superior', 'Superior'),
        ('users', 'Specify Users'),
        ('groups', 'Specify Groups'),
        ('jobs', 'Specify Jobs'),
        ('departments', 'Specify Departments'),
        ('expression', 'Expression'),
    ], string='Approve Type', default='all', help="Choose type of approve.")

    approve_user_ids = fields.Many2many('res.users', 'odoo_workflow_node_approve_users_rel', 'node_id',
                                        'approve_users_id', string='Users')
    approve_group_ids = fields.Many2many('res.groups', 'odoo_workflow_node_approve_groups_rel', 'node_id',
                                         'approve_groups_id', string='Groups')
    approve_job_ids = fields.Many2many('hr.job', 'odoo_workflow_node_approve_jobs_rel', 'node_id',
                                       'approve_jobs_id', string='Jobs')
    approve_department_ids = fields.Many2many('hr.department', 'odoo_workflow_node_approve_departments_rel', 'node_id',
                                              'approve_departments_id', string='Departments')
    approve_expression = fields.Text(string='Expression', default=CONDITION_CODE_TEMP)

    notice_type = fields.Selection([
        ('none', 'None'),
        ('initiator', 'Initiator'),
        ('optional', 'Optional'),
        ('superior', 'Superior'),
        ('users', 'Specify Users'),
        ('groups', 'Specify Groups'),
        ('jobs', 'Specify Jobs'),
        ('departments', 'Specify Departments'),
        ('expression', 'Expression'),
    ], string='Notice Type', default='none', help="Choose type of notice.")

    notice_group_ids = fields.Many2many('res.groups', 'odoo_workflow_node_notice_groups_rel', 'node_id',
                                        'notice_groups_id', string='Groups')
    notice_user_ids = fields.Many2many('res.users', 'odoo_workflow_node_notice_users_rel', 'node_id',
                                       'notice_users_id', string='Users')
    notice_job_ids = fields.Many2many('hr.job', 'odoo_workflow_node_notice_jobs_rel', 'node_id',
                                      'notice_jobs_id', string='Jobs')
    notice_department_ids = fields.Many2many('hr.department', 'odoo_workflow_node_notice_departments_rel', 'node_id',
                                             'notice_departments_id', string='Departments')
    notice_expression = fields.Text(string='Expression', default=CONDITION_CODE_TEMP)

    @api.depends('flow_start', 'flow_end')
    def _compute_bg_color(self):
        for node in self:
            node.bg_color = 'grey' if node.flow_start or node.flow_end else 'white'

    @api.onchange('is_forward')
    def _onchange_is_forward(self):
        self.ensure_one()
        if self.is_forward:
            button_vals = {
                'name': '转发',
                'is_forward': True,
                'is_highlight': False,
                'action_type': 'code',
                'code': FORWARD_CODE_TEMP
            }
            self.button_ids = [Command.create(button_vals)]
        else:
            for button in self.button_ids:
                if button.is_forward:
                    button.unlink()

    def btn_load_fields(self):
        # Variables
        field_obj = self.env['ir.model.fields']
        for rec in self:
            # Clear Fields List
            rec.field_ids.unlink()
            # Load Fields
            rec_fields = field_obj.search([('model_id', '=', rec.model_id.id)])
            for field in rec_fields:
                rec.field_ids.create({
                    'model_id': rec.model_id.id,
                    'node_id': rec.id,
                    'field_id': field.id,
                    'readonly': False,
                    'required': False,
                    'invisible': False,
                })

    def set_approve_notice_users(self, record):
        self._set_approve_users(record)
        self._set_notice_users(record)
        return self._set_optional_users(record)

    def _set_approve_users(self, record):
        def _get_users_by_departments(departments):
            users = []
            for department in departments:
                for member in department.member_ids:
                    if member.user_id.id:
                        users.append(member.user_id.id)
            return list(set(users))

        def _get_users_by_jobs(jobs):
            users = []
            for job in jobs:
                for employee in job.employee_ids:
                    if employee.user_id.id:
                        users.append(employee.user_id.id)
            return list(set(users))

        def _get_superior():
            current_user = self.env['res.users'].browse(self.env.uid)
            if current_user.employee_id.parent_id.user_id.id:
                return [current_user.employee_id.parent_id.user_id.id]
            else:
                return []

        def _get_users_by_expression(expression):
            cx = self.env.context.copy() or {}
            locals_dict = {
                'env': self.env,
                'model': self.env[cx.get('active_model', False)],
                'obj': self.env[cx.get('active_model', False)].browse(cx.get('active_id', 0)),
                'user': self.env.user,
                'datetime': datetime,
                'time': time,
                'date': date,
                'timedelta': timedelta,
            }
            try:
                safe_eval(expression, locals_dict=locals_dict, mode='exec', nocopy=True)
                users = 'users' in locals_dict and locals_dict['users'] or False
            except ValidationError as ex:
                raise ex
            except SyntaxError as ex:
                raise UserError(_("Wrong python code defined.\n\nError: %s\nLine: %s, Column: %s\n\n%s" % (
                    ex.args[0], ex.args[1][1], ex.args[1][2], ex.args[1][3])))
            return users if users else []

        if self.approve_type == "all":
            record.x_approve_user_ids = [Command.clear()]

        if self.approve_type == "initiator":
            user = self.env['res.users'].browse(record.create_uid.id)
            record.x_approve_user_ids = [Command.set([user.id])]

        if self.approve_type == "optional":
            pass

        if self.approve_type == "superior":
            record.x_approve_user_ids = [Command.set(_get_superior())]

        if self.approve_type == "users":
            record.x_approve_user_ids = [Command.set(self.approve_user_ids.ids)]

        if self.approve_type == "groups":
            record.x_approve_user_ids = [Command.set(self.approve_group_ids.users.ids)]

        if self.approve_type == "jobs":
            record.x_approve_user_ids = [Command.set(_get_users_by_jobs(self.approve_job_ids))]

        if self.approve_type == "departments":
            record.x_approve_user_ids = [Command.set(_get_users_by_departments(self.approve_department_ids))]

        if self.approve_type == "expression":
            record.x_approve_user_ids = [Command.set(_get_users_by_expression(self.approve_expression))]

    def _set_notice_users(self, record):
        def _get_users_by_departments(departments):
            users = []
            for department in departments:
                for member in department.member_ids:
                    if member.user_id.id:
                        users.append(member.user_id.id)
            return list(set(users))

        def _get_users_by_jobs(jobs):
            users = []
            for job in jobs:
                for employee in job.employee_ids:
                    if employee.user_id.id:
                        users.append(employee.user_id.id)
            return list(set(users))

        def _get_superior():
            current_user = self.env['res.users'].browse(self.env.uid)
            if current_user.employee_id.parent_id.user_id.id:
                return [current_user.employee_id.parent_id.user_id.id]
            else:
                return []

        def _get_users_by_expression(expression):
            cx = self.env.context.copy() or {}
            locals_dict = {
                'env': self.env,
                'model': self.env[cx.get('active_model', False)],
                'obj': self.env[cx.get('active_model', False)].browse(cx.get('active_id', 0)),
                'user': self.env.user,
                'datetime': datetime,
                'time': time,
                'date': date,
                'timedelta': timedelta,
            }
            try:
                safe_eval(expression, locals_dict=locals_dict, mode='exec', nocopy=True)
                users = 'users' in locals_dict and locals_dict['users'] or False
            except ValidationError as ex:
                raise ex
            except SyntaxError as ex:
                raise UserError(_("Wrong python code defined.\n\nError: %s\nLine: %s, Column: %s\n\n%s" % (
                    ex.args[0], ex.args[1][1], ex.args[1][2], ex.args[1][3])))
            return users if users else []

        if self.notice_type == "none":
            record.x_notice_user_ids = [Command.clear()]

        if self.notice_type == "initiator":
            user = self.env['res.users'].browse(record.create_uid.id)
            record.x_notice_user_ids = [Command.set([user.id])]

        if self.notice_type == "optional":
            pass

        if self.notice_type == "superior":
            record.x_notice_user_ids = [Command.set(_get_superior())]

        if self.notice_type == "users":
            record.x_notice_user_ids = [Command.set(self.notice_user_ids.ids)]

        if self.notice_type == "groups":
            record.x_notice_user_ids = [Command.set(self.notice_group_ids.users.ids)]

        if self.notice_type == "jobs":
            record.x_notice_user_ids = [Command.set(_get_users_by_jobs(self.notice_job_ids))]

        if self.notice_type == "departments":
            record.x_notice_user_ids = [Command.set(_get_users_by_departments(self.notice_department_ids))]

        if self.notice_type == "expression":
            record.x_notice_user_ids = [Command.set(_get_users_by_expression(self.notice_expression))]

    def _set_optional_users(self, record):
        if self.approve_type == "optional" or self.notice_type == "optional":
            return self._action_open_workflow_optional(record, self.approve_type == "optional",
                                                       self.notice_type == "optional")

    def _action_open_workflow_optional(self, record, is_approve=False, is_notice=False):
        return {
            "name": _('Workflow Optional'),
            "type": 'ir.actions.act_window',
            "res_model": 'odoo.workflow.optional',
            "view_mode": 'form',
            "view_id": self.env.ref('odoo_dynamic_workflow.odoo_workflow_optional_view_form').id,
            "target": 'new',
            "context": {
                **self.env.context,
                'active_id': record.id,
                'active_model': record._name,
                'default_is_approve': is_approve,
                'default_is_notice': is_notice,
            },
        }
